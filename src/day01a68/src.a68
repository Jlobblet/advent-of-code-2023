[] STRING textual digits = ("one", "two", "three", "four", "five", "six", "seven", "eight", "nine");

PROC starts with = (STRING haystack, STRING needle) BOOL: (
    UPB haystack - LWB haystack >= UPB needle - LWB needle
    | haystack[LWB haystack : LWB haystack + UPB needle - LWB needle] = needle
    | FALSE
);

PROC parse digit = (CHAR c, REF INT i) BOOL: (
    is digit(c)
    | i := (ABS c) - (ABS "0"); TRUE
    | FALSE
);

PROC parse number = (STRING s, REF INT i) BOOL: (
    UPB s < LWB s                | FALSE
    |: parse digit (s[LWB s], i) | TRUE
    |
        BOOL found := FALSE;
        FOR j FROM LWB textual digits BY 1 TO UPB textual digits
        WHILE NOT found
        DO
            (starts with (s, textual digits[j]) | i := j; found := TRUE)
        OD;
        found
);

INT part one := 0, part two := 0;

BOOL finished reading := FALSE;
on logical file end (stand in, (REF FILE f) BOOL: finished reading := TRUE);

WHILE
    STRING line;
    get(stand in, (line, new line));
    NOT finished reading
DO
    INT first digit := 0, second digit := 0;
    BOOL finished;

    # Part one #
    finished := FALSE;
    FOR i FROM LWB line BY 1 TO UPB line
    WHILE NOT finished
    DO
        finished := parse digit (line[i], first digit)
    OD;

    finished := FALSE;
    FOR i FROM UPB line BY -1 TO LWB line
    WHILE NOT finished
    DO
        finished := parse digit (line[i], second digit)
    OD;
    part one +:= first digit * 10 + second digit;

    # Part two #
    finished := FALSE;
    FOR i FROM LWB line BY 1 TO UPB line
    WHILE NOT finished
    DO
        finished := parse number (line[i : UPB line], first digit)
    OD;

    finished := FALSE;
    FOR i FROM UPB line BY -1 TO LWB line
    WHILE NOT finished
    DO
        finished := parse number (line[i : UPB line], second digit)
    OD;
    part two +:= first digit * 10 + second digit
OD;

print((part one, part two, new line))
